# generated by datamodel-codegen:
#   filename:  nvd.json
#   timestamp: 2024-06-03T09:21:24+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from msgspec import Meta, Struct, field
from typing_extensions import Annotated

from . import cvss_v2, cvss_v3


class Type(Enum):
    primary = 'Primary'
    secondary = 'Secondary'


class AccessVectorType(Enum):
    network = 'NETWORK'
    adjacent_network = 'ADJACENT_NETWORK'
    local = 'LOCAL'


class AccessComplexityType(Enum):
    high = 'HIGH'
    medium = 'MEDIUM'
    low = 'LOW'


class AuthenticationType(Enum):
    multiple = 'MULTIPLE'
    single = 'SINGLE'
    none = 'NONE'


class CiaType(Enum):
    none = 'NONE'
    partial = 'PARTIAL'
    complete = 'COMPLETE'


class ExploitabilityType(Enum):
    unproven = 'UNPROVEN'
    proof_of_concept = 'PROOF_OF_CONCEPT'
    functional = 'FUNCTIONAL'
    high = 'HIGH'
    not_defined = 'NOT_DEFINED'


class RemediationLevelType(Enum):
    official_fix = 'OFFICIAL_FIX'
    temporary_fix = 'TEMPORARY_FIX'
    workaround = 'WORKAROUND'
    unavailable = 'UNAVAILABLE'
    not_defined = 'NOT_DEFINED'


class ReportConfidenceType(Enum):
    unconfirmed = 'UNCONFIRMED'
    uncorroborated = 'UNCORROBORATED'
    confirmed = 'CONFIRMED'
    not_defined = 'NOT_DEFINED'


class CollateralDamagePotentialType(Enum):
    none = 'NONE'
    low = 'LOW'
    low_medium = 'LOW_MEDIUM'
    medium_high = 'MEDIUM_HIGH'
    high = 'HIGH'
    not_defined = 'NOT_DEFINED'


class TargetDistributionType(Enum):
    none = 'NONE'
    low = 'LOW'
    medium = 'MEDIUM'
    high = 'HIGH'
    not_defined = 'NOT_DEFINED'


class CiaRequirementType(Enum):
    low = 'LOW'
    medium = 'MEDIUM'
    high = 'HIGH'
    not_defined = 'NOT_DEFINED'


ScoreType = Annotated[float, Meta(ge=0.0, le=10.0)]


class AttackVectorType(Enum):
    network = 'NETWORK'
    adjacent_network = 'ADJACENT_NETWORK'
    local = 'LOCAL'
    physical = 'PHYSICAL'


class ModifiedAttackVectorType(Enum):
    network = 'NETWORK'
    adjacent_network = 'ADJACENT_NETWORK'
    local = 'LOCAL'
    physical = 'PHYSICAL'
    not_defined = 'NOT_DEFINED'


class AttackComplexityType(Enum):
    high = 'HIGH'
    low = 'LOW'


class ModifiedAttackComplexityType(Enum):
    high = 'HIGH'
    low = 'LOW'
    not_defined = 'NOT_DEFINED'


class PrivilegesRequiredType(Enum):
    high = 'HIGH'
    low = 'LOW'
    none = 'NONE'


class ModifiedPrivilegesRequiredType(Enum):
    high = 'HIGH'
    low = 'LOW'
    none = 'NONE'
    not_defined = 'NOT_DEFINED'


class UserInteractionType(Enum):
    none = 'NONE'
    required = 'REQUIRED'


class ModifiedUserInteractionType(Enum):
    none = 'NONE'
    required = 'REQUIRED'
    not_defined = 'NOT_DEFINED'


class ScopeType(Enum):
    unchanged = 'UNCHANGED'
    changed = 'CHANGED'


class ModifiedScopeType(Enum):
    unchanged = 'UNCHANGED'
    changed = 'CHANGED'
    not_defined = 'NOT_DEFINED'


class CiaTypeModel(Enum):
    none = 'NONE'
    low = 'LOW'
    high = 'HIGH'


class ModifiedCiaType(Enum):
    none = 'NONE'
    low = 'LOW'
    high = 'HIGH'
    not_defined = 'NOT_DEFINED'


class ExploitCodeMaturityType(Enum):
    unproven = 'UNPROVEN'
    proof_of_concept = 'PROOF_OF_CONCEPT'
    functional = 'FUNCTIONAL'
    high = 'HIGH'
    not_defined = 'NOT_DEFINED'


class ConfidenceType(Enum):
    unknown = 'UNKNOWN'
    reasonable = 'REASONABLE'
    confirmed = 'CONFIRMED'
    not_defined = 'NOT_DEFINED'


class SeverityType(Enum):
    none = 'NONE'
    low = 'LOW'
    medium = 'MEDIUM'
    high = 'HIGH'
    critical = 'CRITICAL'


CveId = Annotated[str, Meta(pattern='^CVE-[0-9]{4}-[0-9]{4,}$')]


class LangString(Struct):
    lang: str
    value: Annotated[str, Meta(max_length=4096)]


class Reference(Struct, kw_only=True):
    url: Annotated[str, Meta(max_length=500)]
    source: Optional[str] = None
    tags: Optional[List[str]] = None


class VendorComment(Struct):
    organization: str
    comment: str
    last_modified: str = field(name='lastModified')


class Weakness(Struct):
    source: str
    type: str
    description: List[LangString]


class Operator(Enum):
    and_ = 'AND'
    or_ = 'OR'


class CpeMatch(Struct):
    vulnerable: bool
    criteria: str
    match_criteria_id: str = field(name='matchCriteriaId')
    version_start_excluding: Optional[str] = field(
        name='versionStartExcluding', default=None
    )
    version_start_including: Optional[str] = field(
        name='versionStartIncluding', default=None
    )
    version_end_excluding: Optional[str] = field(
        name='versionEndExcluding', default=None
    )
    version_end_including: Optional[str] = field(
        name='versionEndIncluding', default=None
    )


DefSubscore = Annotated[float, Meta(description='CVSS subscore.', ge=0.0, le=10.0)]


class Node(Struct):
    operator: Operator
    cpe_match: List[CpeMatch] = field(name='cpeMatch')
    negate: Optional[bool] = None


class CvssV2(Struct):
    source: str
    type: Type
    cvss_data: cvss_v2.Field0 = field(name='cvssData')
    base_severity: Optional[str] = field(name='baseSeverity', default=None)
    exploitability_score: Optional[DefSubscore] = field(
        name='exploitabilityScore', default=None
    )
    impact_score: Optional[DefSubscore] = field(name='impactScore', default=None)
    ac_insuf_info: Optional[bool] = field(name='acInsufInfo', default=None)
    obtain_all_privilege: Optional[bool] = field(
        name='obtainAllPrivilege', default=None
    )
    obtain_user_privilege: Optional[bool] = field(
        name='obtainUserPrivilege', default=None
    )
    obtain_other_privilege: Optional[bool] = field(
        name='obtainOtherPrivilege', default=None
    )
    user_interaction_required: Optional[bool] = field(
        name='userInteractionRequired', default=None
    )


class CvssV30(Struct):
    source: str
    type: Type
    cvss_data: cvss_v3.Field0 = field(name='cvssData')
    exploitability_score: Optional[DefSubscore] = field(
        name='exploitabilityScore', default=None
    )
    impact_score: Optional[DefSubscore] = field(name='impactScore', default=None)


class CvssV31(Struct):
    source: str
    type: Type
    cvss_data: cvss_v3.Field1 = field(name='cvssData')
    exploitability_score: Optional[DefSubscore] = field(
        name='exploitabilityScore', default=None
    )
    impact_score: Optional[DefSubscore] = field(name='impactScore', default=None)


class Config(Struct):
    nodes: List[Node]
    operator: Optional[Operator] = None
    negate: Optional[bool] = None


class Metrics(Struct):
    cvss_metric_v31: Optional[
        Annotated[List[CvssV31], Meta(description='CVSS V3.1 score.')]
    ] = field(name='cvssMetricV31', default=None)
    cvss_metric_v30: Optional[
        Annotated[List[CvssV30], Meta(description='CVSS V3.0 score.')]
    ] = field(name='cvssMetricV30', default=None)
    cvss_metric_v2: Optional[
        Annotated[List[CvssV2], Meta(description='CVSS V2.0 score.')]
    ] = field(name='cvssMetricV2', default=None)


class CveItem(Struct):
    id: CveId
    published: str
    last_modified: str = field(name='lastModified')
    descriptions: List[LangString]
    references: List[Reference]
    source_identifier: Optional[str] = field(name='sourceIdentifier', default=None)
    vuln_status: Optional[str] = field(name='vulnStatus', default=None)
    evaluator_comment: Optional[str] = field(name='evaluatorComment', default=None)
    evaluator_solution: Optional[str] = field(name='evaluatorSolution', default=None)
    evaluator_impact: Optional[str] = field(name='evaluatorImpact', default=None)
    cisa_exploit_add: Optional[str] = field(name='cisaExploitAdd', default=None)
    cisa_action_due: Optional[str] = field(name='cisaActionDue', default=None)
    cisa_required_action: Optional[str] = field(name='cisaRequiredAction', default=None)
    cisa_vulnerability_name: Optional[str] = field(
        name='cisaVulnerabilityName', default=None
    )
    metrics: Optional[
        Annotated[
            Metrics,
            Meta(description='Metric scores for a vulnerability as found on NVD.'),
        ]
    ] = None
    weaknesses: Optional[List[Weakness]] = None
    configurations: Optional[List[Config]] = None
    vendor_comments: Optional[List[VendorComment]] = field(
        name='vendorComments', default=None
    )


class DefCveItem(Struct):
    cve: CveItem


class JsonSchemaForNvdVulnerabilityDataApiVersion210(Struct):
    results_per_page: int = field(name='resultsPerPage')
    start_index: int = field(name='startIndex')
    total_results: int = field(name='totalResults')
    format: str
    version: str
    timestamp: str
    vulnerabilities: Annotated[
        List[DefCveItem], Meta(description='NVD feed array of CVE')
    ]
